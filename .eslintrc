{
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json",
    "sourceType": "module"
  },
  "plugins": [
    "tailwindcss",
    "simple-import-sort",
    "sort-destructure-keys",
    "import-access",
    "testing-library"
  ],
  "extends": [
    "plugin:@typescript-eslint/recommended",
    "next/core-web-vitals",
    "plugin:tailwindcss/recommended",
    "prettier"
  ],
  "ignorePatterns": ["**/base.js", "**/nextjs.js", "**/nestjs.js"],
  "rules": {
    "curly": "error",
    "no-console": ["error", { "allow": ["warn", "info", "error"] }],
    "no-restricted-syntax": [
      "error",
      { "selector": "TSEnumDeclaration", "message": "Don't declare enums" }
    ],
    "prefer-arrow-callback": "error",
    "prefer-const": "error",
    "func-style": ["error", "expression"],
    "arrow-body-style": ["error", "as-needed"],
    "no-restricted-imports": [
      "error",
      { "paths": [{ "name": "react", "importNames": ["default"] }] }
    ],
    // sort
    "import/newline-after-import": "error",
    "import/no-default-export": "error",
    "import-access/jsdoc": "error",
    "simple-import-sort/imports": "error",
    "simple-import-sort/exports": "error",
    "sort-destructure-keys/sort-destructure-keys": 2,

    // react
    "react/display-name": "error",
    "react/jsx-handler-names": "off",
    "tailwindcss/no-custom-classname": "off",

    // @typescript-eslint
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/no-empty-interface": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-var-requires": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/consistent-type-imports": ["warn", { "prefer": "type-imports" }],
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "varsIgnorePattern": "^_", "argsIgnorePattern": "^_" }
    ],

    "@typescript-eslint/naming-convention": [
      "error",
      // typeLike (class, interface, typeAlias, enum, typeParameter) は PascalCase
      {
        "selector": ["typeLike"],
        "format": ["PascalCase"]
      },
      // function, method (classMethod, objectLiteralMethod, typeMethod) は camelCase
      {
        "selector": ["function", "method"],
        "format": ["camelCase"]
      },
      // function 以外の variable, parameter は camelCase
      {
        "selector": ["variable", "parameter"],
        "types": ["boolean", "string", "number", "array"],
        "format": ["camelCase"]
      },
      // boolean の variable は特定の prefix をつけた状態で PascalCase
      {
        "selector": "variable",
        "types": ["boolean"],
        "format": ["PascalCase"],
        "prefix": ["is", "should"],
        "filter": { "regex": "^_", "match": false }
      }
    ],
    // jsx-a11y
    "jsx-a11y/no-autofocus": "off",
    "jsx-a11y/anchor-is-valid": [
      "error",
      {
        "components": ["Link"],
        "specialLink": ["hrefLeft", "hrefRight"],
        "aspects": ["invalidHref", "preferButton"]
      }
    ]
  },
  "overrides": [
    {
      "files": [
        "src/pages/**/*.tsx",
        "src/pages/api/**/*.ts",
        "*.stories.@(ts|tsx|js|jsx|mjs|cjs)",
        "next.config.mjs",
        "playwright.config.ts"
      ],
      "rules": { "import/no-default-export": "off" }
    },
    {
      "files": ["**/__tests__/**/*.[jt]s?(x)", "**/?(*.)+(spec|test).[jt]s?(x)"],
      "extends": ["plugin:testing-library/react"]
    }
  ]
}
